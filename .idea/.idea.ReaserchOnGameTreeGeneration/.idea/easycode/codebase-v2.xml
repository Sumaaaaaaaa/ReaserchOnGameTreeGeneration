<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/Assets/GetLightIntensity/LightIntensity.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/GetLightIntensity/LightIntensityTool.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/TestFiles/tester.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/Automaton/Automaton.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/Automaton/EntityAutomaton.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/EntityObjects/Entity_Organ.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/EntityObjects/EntityBud.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/EntityObjects/EntityPhytomer.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/OrganCohort/FlowerCohort.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/OrganCohort/FruitCohort.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/OrganCohort/LeafCohort.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/OrganCohort/NewPhytomerCohort.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/OrganCohort/PhytomerCohort.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/Public/Bud.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/Public/Organ.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/Public/Phytomer.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/Public/Plant.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/Public/PlantPruner.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/Public/PlantRenderer.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/Axis.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/GenericFunctions.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/LeafData.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/PhytomerData.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/ReadMe.md;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/UnlimitedGreen/UnlimitedGreen.cs;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Assets/Automaton部分.md;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Packages/manifest.json;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/Packages/packages-lock.json;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/ProjectSettings/SceneTemplateSettings.json;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration&quot;:&quot;{\&quot;/Assets/UnlimitedGreen/LeafData.cs\&quot;:\&quot;This file defines a single class `LeafData` that encapsulates various parameters and functions related to leaf data in a plant growth simulation.\\n\\n`LeafData`: A class that holds data and functions related to leaf characteristics in a plant growth simulation.\\n\\n`LeafData(int, float, float, float, float, int, int, Func\\u003cint,int,float\\u003e)`: A constructor that initializes the `LeafData` class with various parameters, including maximum physiological age, leaf allometry, extinction coefficient, projection area, water use efficiency, source and sink valid cycles, and a sink function.\\n\\n`MaxPhysiologicalAge`: The maximum physiological age of the leaf.\\n`LeafAllometryE`: The leaf allometry parameter \\u0027e\\u0027.\\n`SourceValidCycles`: The number of valid cycles for the source.\\n`SinkValidCycles`: The number of valid cycles for the sink.\\n`SinkFunction`: A function that calculates the sink strength based on physiological age and cycle age.\\n`ExtinctionCoefficient`: The extinction coefficient \\u0027K\\u0027.\\n`ProjectionArea`: The projection area \\u0027Sp\\u0027.\\n`WaterUseEfficiency`: The water use efficiency \\u0027r\\u0027.\&quot;,\&quot;/Assets/UnlimitedGreen/EntityObjects/Entity_Organ.cs\&quot;:\&quot;`EntityOrgan\\u003cT\\u003e`: An abstract class that represents an entity organ with properties such as phyllotaxis rotation, biomass, and a storage pointer.\\n\\n`EntityOrgan\\u003cT\\u003e.ToString()`: A method that returns a string representation of the entity organ, including its phyllotaxis rotation, biomass, and storage pointer status.\\n\\n`EntityFlower`: A concrete implementation of the `EntityOrgan\\u003cT\\u003e` class, representing a flower.\\n\\n`EntityFruit`: A concrete implementation of the `EntityOrgan\\u003cT\\u003e` class, representing a fruit.\\n\\n`EntityLeaf`: A concrete implementation of the `EntityOrgan\\u003cT\\u003e` class, representing a leaf.\\n\\nThis file defines an abstract class `EntityOrgan\\u003cT\\u003e` and three concrete implementations of it, representing different types of entity organs (flowers, fruits, and leaves) within the `UnlimitedGreen` namespace.\&quot;,\&quot;/Assets/UnlimitedGreen/EntityObjects/EntityPhytomer.cs\&quot;:\&quot;This file defines a single class called `EntityPhytomer` within the `UnlimitedGreen` namespace. The `EntityPhytomer` class represents a structural unit of a plant and contains various properties related to the plant\\u0027s geometry, such as radius, direction, length, position, and references to associated flowers, fruits, leaves, and axes.\\n\\nThe file does not contain any functions, only the definition of the `EntityPhytomer` class.\&quot;,\&quot;/Assets/UnlimitedGreen/OrganCohort/PhytomerCohort.cs\&quot;:\&quot;`PhytomerCohort`: A class that manages a collection of `EntityPhytomer` objects, organized by their birth cycle and physiological age.\\n\\n`CalculateSinkSum`: Calculates the sum of the sink strengths for all `EntityPhytomer` objects in the cohort.\\n`Allocate`: Allocates produced biomass to the `EntityPhytomer` objects in the cohort based on their sink strengths.\\n`IncreaseAge`: Removes `EntityPhytomer` objects from the cohort that have exceeded their valid cycles.\\n`Add`: Adds new `EntityPhytomer` objects to the cohort, organized by their birth cycle and physiological age.\\n\\nThis file defines a `PhytomerCohort` class that manages a collection of `EntityPhytomer` objects, providing methods to calculate the total sink strength, allocate produced biomass, increase the age of the objects, and add new objects to the cohort.\&quot;,\&quot;/ProjectSettings/SceneTemplateSettings.json\&quot;:\&quot;This file appears to be a JSON configuration for a Unity project. It does not contain any classes or functions, but rather a list of dependency type information and other settings. Here\\u0027s a summary of the contents:\\n\\n`templatePinStates`: An empty array for template pin states.\\n\\n`dependencyTypeInfos`: A list of dependency type information, including various Unity classes such as `AnimationClip`, `AnimatorController`, `AudioMixerController`, `GameObject`, `Material`, and more. Each entry includes information about whether the type is user-added and the default instantiation mode.\\n\\n`defaultDependencyTypeInfo`: Default dependency type information, including the type `\\u003cdefault_scene_template_dependencies\\u003e` and a default instantiation mode of 1.\\n\\n`newSceneOverride`: An integer value (0) for a new scene override.\\n\\nOverall, this file appears to be a configuration for managing dependencies and settings related to a Unity project, likely used in a Unity Editor or build process.\&quot;,\&quot;/Assets/UnlimitedGreen/Automaton/Automaton.cs\&quot;:\&quot;`Automaton\\u003cT\\u003e`: An abstract class that represents an automaton with a set of vertices, an adjacency matrix, and repeat times for each vertex.\\n\\n`Automaton\\u003cT\\u003e` constructor: Initializes the Automaton class with the provided repeat times, adjacency matrix, and vertices, and performs various validation checks on the input data.\\n\\n`Count`: An internal property that returns the number of vertices in the automaton.\\n\\n`InAutomaton`: A concrete implementation of the Automaton class, where the vertices are of type Phytomer.\\n\\n`DualScaleAutomaton`: A concrete implementation of the Automaton class, where the vertices are of type InAutomaton.\\n\\nThis file defines an abstract Automaton class and two concrete implementations, InAutomaton and DualScaleAutomaton, which are used to represent and manage different types of automata in the UnlimitedGreen namespace.\&quot;,\&quot;/Assets/UnlimitedGreen/ReadMe.md\&quot;:\&quot;This file does not contain any classes or functions. Instead, it provides the following information:\\n\\n1. Data checking: In the Unity Editor environment, all input parameters are checked for data, but this check is not performed when running outside the Unity Editor environment.\\n\\n2. Data format: To match the GreenLab model and common formulas used in plant simulation, all sequence-related functions use a 1-based index (i.e., the first input age is 1, not 0).\\n\\n3. Rendering module (Render): The file specifies the requirements for the mesh data used in the rendering module, such as the Y-axis representing the direction from the axis to the organ, and the Z-axis of the leaf\\u0027s local coordinate system representing the upward direction of the leaf.\&quot;,\&quot;/Assets/UnlimitedGreen/Public/Bud.cs\&quot;:\&quot;This file defines a `Bud` class that represents a plant bud and its various probability parameters.\\n\\n`Bud`: Represents a plant bud and its various probability parameters, such as rhythm ratio, random ratio, viability ratio, branching intensity, and light ratio.\\n\\n`Bud(bool[], Func\\u003cint,float\\u003e, Func\\u003cint,float\\u003e, Func\\u003cint,int,float\\u003e, Func\\u003cVector3,float\\u003e)`: Initializes a `Bud` object with the provided probability parameters.\&quot;,\&quot;/Assets/UnlimitedGreen/OrganCohort/LeafCohort.cs\&quot;:\&quot;This file contains a single class `LeafCohort` and several functions within it. Here\\u0027s a summary of each:\\n\\n`LeafCohort`: A class that manages the data structure and operations related to leaf cohorts in a plant growth simulation.\\n\\n`LeafCohortData`: A private struct that holds the data for a single leaf cohort, including the set of entity leaves, their birth cycle, and other relevant information.\\n\\n`Add`: Adds a new entity leaf to the appropriate age-based data structure.\\n\\n`PushIn`: Transfers the newly added entity leaves from the temporary storage to the main data structures.\\n\\n`CalculateSinkSum`: Calculates the total sink strength for the current plant age.\\n\\n`Allocate`: Allocates the produced biomass to the entity leaves based on their sink strength.\\n\\n`Production`: Calculates the total biomass production for the current plant state.\\n\\n`IncreaseAge`: Advances the age of the leaf cohorts, moving them from the sink-source to the source data structures.\\n\\n`ToString`: Provides a detailed string representation of the current state of the `LeafCohort` object, including the data structures and their contents.\&quot;,\&quot;/Assets/UnlimitedGreen/Public/Plant.cs\&quot;:\&quot;This file contains the implementation of the `Plant` class and its related classes and functions in the `UnlimitedGreen` namespace. The `Plant` class represents a plant that grows according to the GreenLab model, with various organs and growth mechanisms.\\n\\n`Plant`: Represents a plant that grows according to the GreenLab model, with various organs and growth mechanisms.\\n\\n`Plant.Pruning`: Prunes a specific axis of the plant by removing or shortening the phytomers.\\n\\n`Plant.Growth`: Handles the growth of the plant, including organogenesis, biomass allocation, and production.\\n\\n`Plant.Organogenesis`: Handles the creation of new phytomers, leaves, flowers, and fruits on the plant\\u0027s axes.\\n\\nThe file also includes several supporting classes and functions that are used by the `Plant` class to manage the various aspects of the plant\\u0027s growth and development.\&quot;,\&quot;/Assets/UnlimitedGreen/OrganCohort/FruitCohort.cs\&quot;:\&quot;This file contains a single class `FruitCohort` that manages the storage and allocation of fruit data for a plant.\\n\\n`FruitCohort`: A class that manages the storage and allocation of fruit data for a plant, including adding new fruits, calculating the total sink sum, allocating biomass, and increasing the age of the plant.\\n\\n`FruitCohortData`: A private struct that holds the data for a single cohort of fruits, including the set of `EntityFruit` objects and the birth cycle.\\n\\n`Add`: Adds a new `EntityFruit` object to the current cohort.\\n`PushIn`: Pushes the current cohort data into the queue of cohorts.\\n`CalculateSinkSum`: Calculates the total sink sum for all cohorts.\\n`Allocate`: Allocates the produced biomass to the fruits in each cohort based on their sink strength.\\n`IncreaseAge`: Increases the age of the plant and removes any cohorts that are no longer valid.\\n`ToString`: Provides a string representation of the `FruitCohort` object for debugging purposes (only in the Unity Editor).\&quot;,\&quot;/Assets/GetLightIntensity/LightIntensity.cs\&quot;:\&quot;This file contains a single class and three functions:\\n\\n`LightIntensity`: A class that provides methods to calculate the light intensity at a given world position.\\n\\n`GetLightIntensity`: A static function that calculates the total light intensity at a given world position by considering all the lights in the scene.\\n\\n`CalculateLightIntensity`: A private static function that calculates the light intensity contribution from a single light source, taking into account the light\\u0027s intensity and color.\\n\\n`CalculateLightAttenuation`: A private static function that calculates the light attenuation based on the distance between the world position and the light source.\\n\\nThis file is responsible for providing a way to calculate the total light intensity at a given world position, taking into account the different types of lights (directional, point, and spot) and their properties.\&quot;,\&quot;/Assets/GetLightIntensity/LightIntensityTool.cs\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`OnDrawGizmos()`: This function is used to draw a red wire sphere and display the light intensity value at the transform position of the game object in the Unity editor.\\n\\nThe file appears to be a tool that helps visualize the light intensity at a specific position in the Unity scene. It uses the `LightIntensity.GetLightIntensity()` function to retrieve the light intensity value and displays it as text next to a red wire sphere at the transform position of the game object.\&quot;,\&quot;/Assets/UnlimitedGreen/PhytomerData.cs\&quot;:\&quot;This file defines a single class, `PhytomerData`, which is used to store various data related to Phytomers, which are a fundamental unit in plant growth modeling.\\n\\n`PhytomerData`: A class that stores data related to Phytomers, including maximum physiological age, valid cycles, sink function, allometry data, and topology functions.\\n\\n`PhytomerData(int, int, Func\\u003cint, int, float\\u003e, (float, float)[], Func\\u003cint, Vector3, Vector3, float, (Vector3, Vector3)\\u003e, Func\\u003cint, Vector3, Vector3, Vector3\\u003e)`: A constructor for the `PhytomerData` class that takes in various parameters related to Phytomers and performs validation checks on the input data.\&quot;,\&quot;/Assets/TestFiles/tester.cs\&quot;:\&quot;This file contains a Unity script that simulates the growth of a plant using the UnlimitedGreen library. Here are the classes and functions in the file:\\n\\n`tester`: A MonoBehaviour class that manages the plant simulation and rendering.\\n\\n`phytomerTopologyFunc`: A function that calculates the new position and direction of a phytomer (a plant growth unit) based on the previous position and direction.\\n\\n`axisTopologyFunc`: A function that calculates the new direction of a plant axis based on the previous direction and a vertical direction after phyllotaxis rotation.\\n\\n`Phytomer`: A class that represents a plant growth unit with a set of phyllotaxis (leaf arrangement) patterns.\\n\\n`InAutomaton`: A class that represents an internal automaton, which is a component of the dual-scale automaton.\\n\\n`DualScaleAutomaton`: A class that represents a dual-scale automaton, which is a plant growth model that combines two different scales of growth.\\n\\n`Bud`: A class that represents a plant bud, which contains information about the plant\\u0027s growth rhythm, randomness, viability, branching intensity, and light response.\\n\\n`Plant`: A class that represents a plant, which contains various parameters and functions related to the plant\\u0027s growth and development.\\n\\n`Flower`: A class that represents a plant flower.\\n\\n`Fruit`: A class that represents a plant fruit.\\n\\nThe file sets up a plant simulation with various parameters and growth models, and the `tester` class manages the simulation and rendering of the plant.\&quot;,\&quot;/Assets/Automaton部分.md\&quot;:\&quot;This file does not contain any classes or functions. It appears to be a description of a \\\&quot;Dual-Scale Automaton\\\&quot; concept. The key points are:\\n\\n1. The total outgoing transitions from a state in the automaton do not necessarily sum to 1.\\n2. If the transition results in a state that is not any of the defined states, it is considered a \\\&quot;bud death\\\&quot;.\\n3. This design allows for the possibility of creating \\\&quot;bud death\\\&quot; through the automaton.\&quot;,\&quot;/ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json\&quot;:\&quot;This file appears to be a JSON configuration file that contains a dictionary with three key-value pairs. The file does not contain any classes or functions, but rather defines some configuration settings for a project.\\n\\nHere\\u0027s a summary of the key-value pairs:\\n\\n`IncludeAssemblies`: This key-value pair specifies the assemblies that should be included in the project, which are \\\&quot;Assembly-CSharp\\\&quot; and \\\&quot;UnlimitedGreen\\\&quot;.\\n\\n`Path`: This key-value pair specifies the path to the project, which is represented by the `{ProjectPath}` placeholder.\\n\\n`HistoryPath`: This key-value pair specifies the path to the project\\u0027s history, which is also represented by the `{ProjectPath}` placeholder.\\n\\nOverall, this file appears to be a configuration file that sets up some basic project settings, such as the assemblies to include and the paths to the project and its history.\&quot;,\&quot;/Assets/UnlimitedGreen/Public/PlantPruner.cs\&quot;:\&quot;`PlantPruner`: A class that generates colliders for a plant\\u0027s axes and phytomers.\\n\\n`Generate`: A function that clears the existing colliders and creates new colliders for the plant\\u0027s axes and phytomers.\\n\\n`CreateCollider`: A function that calculates the position, size, and rotation of a collider for a plant\\u0027s phytomer.\\n\\nThis file contains a class called `PlantPruner` that is responsible for generating colliders for a plant\\u0027s axes and phytomers. The `Generate` function is used to clear the existing colliders and create new ones based on the plant\\u0027s structure. The `CreateCollider` function is a helper function that calculates the position, size, and rotation of a collider for a plant\\u0027s phytomer.\&quot;,\&quot;/Packages/packages-lock.json\&quot;:\&quot;This file appears to be a Unity package manifest, which is a JSON file that defines the dependencies and versions of packages used in a Unity project. It does not contain any classes or functions, but rather a list of packages and their dependencies. The file serves to manage the package dependencies for the Unity project, ensuring that the required packages and their versions are installed and available for the project to function correctly.\&quot;,\&quot;/Assets/UnlimitedGreen/Public/PlantRenderer.cs\&quot;:\&quot;This file contains a single class `PlantRenderer` and several functions within it. Here\\u0027s the summary:\\n\\n`PlantRenderer`: A class that renders a plant\\u0027s visual representation, including its axis, leaves, flowers, and fruits.\\n\\n`Awake()`: Initializes the `MeshFilter` and `MeshRenderer` components of the GameObject.\\n\\n`Render(Plant plant)`: Generates the mesh data for the plant\\u0027s visual representation and updates the `MeshFilter` and `MeshRenderer` components.\\n\\n`GizmosDraw(Plant plant)`: Draws the plant\\u0027s visual representation, including its axis, leaves, flowers, and fruits, using Unity\\u0027s Gizmos system.\\n\\n`Add\\u003cT\\u003e(EntityOrgan\\u003cT\\u003e entityOrgan, EntityPhytomer entityPhytomer, Vector3 phytomerDirection, Mesh mesh, float sizeMultiply, List\\u003cVector3\\u003e verticesList, List\\u003cVector3\\u003e normalList, List\\u003cVector2\\u003e uvList)`: A helper function that adds the vertices, normals, and UVs of an entity organ (leaf, flower, or fruit) to the respective lists.\\n\\n`ToTriangles(Mesh organMesh, List\\u003cVector3\\u003e organVertices, List\\u003cint\\u003e organTriangles, List\\u003cVector3\\u003e baseVertices)`: A helper function that generates triangle indices for an organ mesh and adds them to the `organTriangles` list.\\n\\n`PhytomerGenerateFace(int phytomerCount)`: A helper function that generates the round and lid faces for the axis of the plant.\\n\\n`PhytomerAlVerticesPosition(Vector3 direction, Vector3 position, float radius, float V)`: A helper function that generates the vertex positions, normals, and UVs for a single phytomer (segment) of the plant\\u0027s axis.\\n\\n`AxisProcess(Axis axis)`: A helper function that processes a single axis of the plant, generating the vertex data for the axis and its associated organs (leaves, flowers, and fruits).\\n\\n`GizmosLineDrawer`: A helper class that simplifies the drawing of lines using Unity\\u0027s Gizmos system.\&quot;,\&quot;/Assets/UnlimitedGreen/UnlimitedGreen.cs\&quot;:\&quot;This file does not contain any classes or functions. It appears to be a namespace declaration for the `UnlimitedGreen` namespace, which is likely used to organize related code within a Unity project. The file also includes the `UnityEngine` and `System.Random` namespaces, which suggests that the code in this namespace may be related to Unity game development and random number generation.\&quot;,\&quot;/Assets/UnlimitedGreen/GenericFunctions.cs\&quot;:\&quot;This file contains a single static class named `GenericFunctions` that provides a set of utility functions for various calculations related to plant growth and orientation.\\n\\n`GenericFunctions`: A static class that provides generic functions for calculating plant organ age, new sub-direction vectors, and vertical directions based on phyllotaxis.\\n\\n`CalculateAge`: Calculates the age of a plant organ based on the plant\\u0027s age and the organ\\u0027s birth cycle.\\n\\n`NewSubDirection`: Calculates a new sub-direction vector based on the previous direction, the new direction, and the previous sub-direction.\\n\\n`PhyllotaxisToVerticalDirection`: Calculates the vertical direction of a leaf axis based on the phyllotaxis direction, the main direction, and the sub-direction.\&quot;,\&quot;/Assets/UnlimitedGreen/Automaton/EntityAutomaton.cs\&quot;:\&quot;`EntityAutomaton\\u003cT\\u003e`: An abstract class that represents an entity automaton, which is a type of state machine used to model the behavior of entities.\\n\\n`EntityInAutomaton`: A concrete implementation of `EntityAutomaton\\u003cT\\u003e` that represents an \\\&quot;in\\\&quot; automaton, which is a type of automaton that models the expansion of a plant\\u0027s phytomers.\\n\\n`EntityDualScaleAutomaton`: A concrete implementation of `EntityAutomaton\\u003cT\\u003e` that represents a dual-scale automaton, which is a type of automaton that models the growth of a plant at multiple scales.\\n\\n`Expansion()`: A method that performs a single step of the automaton\\u0027s expansion, returning a new phytomer or `null` if the automaton has reached a dead state.\\n\\nThis file defines a set of classes that implement different types of entity automata, which are used to model the growth and development of plants. The `EntityAutomaton\\u003cT\\u003e` class provides a common base for these automata, while the `EntityInAutomaton` and `EntityDualScaleAutomaton` classes implement specific types of automata with different behaviors.\&quot;,\&quot;/Assets/UnlimitedGreen/EntityObjects/EntityBud.cs\&quot;:\&quot;`EntityBud`: A class that represents a bud entity and manages its expansion and growth.\\n\\n`Expansion`: A function that handles the expansion of the bud entity, determining whether a new phytomer can be produced based on various factors such as age, branching intensity, viability, and light conditions.\\n\\nThis file contains a single class, `EntityBud`, which is responsible for managing the expansion and growth of a bud entity. The `Expansion` function within this class is the main logic that determines whether a new phytomer can be produced based on various factors, such as the bud\\u0027s age, branching intensity, viability, and light conditions.\&quot;,\&quot;/Assets/UnlimitedGreen/OrganCohort/FlowerCohort.cs\&quot;:\&quot;This file contains a single class `FlowerCohort` that manages the data related to a group of flowers. Here are the class and function summaries:\\n\\n`FlowerCohort`: A class that manages the data related to a group of flowers, including their birth cycles, biomass, and sink functions.\\n\\n`FlowerCohortData`: A private struct that stores the data for a single cohort of flowers, including a set of `EntityFlower` objects and the birth cycle.\\n\\n`FlowerCohort(Flower)`: Initializes a new instance of the `FlowerCohort` class with the given `Flower` object.\\n\\n`Add(EntityFlower)`: Adds a new `EntityFlower` object to the current cohort.\\n\\n`PushIn()`: Pushes the current cohort data into the queue of cohort data.\\n\\n`CalculateSinkSum(int)`: Calculates the total sink sum for the current plant age.\\n\\n`Allocate(int, float, float)`: Allocates the produced biomass to the flowers in the cohorts based on their sink strengths.\\n\\n`IncreaseAge(int)`: Increases the age of the flowers in the cohorts and removes any cohorts that have exceeded the valid cycles.\\n\\n`ToString()`: Provides a string representation of the `FlowerCohort` object, including the flower sink function and the cohort data.\&quot;,\&quot;/Assets/UnlimitedGreen/OrganCohort/NewPhytomerCohort.cs\&quot;:\&quot;This file contains a single class `NewPhytomerCohort` with the following functions:\\n\\n`NewPhytomerCohort`: A class that manages a collection of `EntityPhytomer` objects, organizing them by their physiological age and providing methods to add new objects, calculate the sum of sinks, increase the age of the objects, and allocate biomass production among the objects.\\n\\n`Add`: Adds a new `EntityPhytomer` object to the collection, organizing it by its physiological age.\\n\\n`CalculateSinkSum`: Calculates the sum of sinks for all `EntityPhytomer` objects in the collection.\\n\\n`IncreaseAge`: Advances the age of all `EntityPhytomer` objects in the collection, returning a new array of `HashSet\\u003cEntityPhytomer\\u003e` representing the objects at each physiological age.\\n\\n`Allocate`: Allocates the produced biomass among the `EntityPhytomer` objects in the collection, updating their physical properties based on their physiological age and the allocated biomass.\\n\\n`ToString`: Provides a string representation of the `NewPhytomerCohort` object, including the contents of the processing queue.\&quot;,\&quot;/Assets/UnlimitedGreen/Public/Phytomer.cs\&quot;:\&quot;This file defines the following classes and functions:\\n\\n`BeerOrgan`: An enumeration that describes the type of organ (if any) carried by a leaf axis node.\\n\\n`Phyllotaxis`: A struct that describes the parameters of a leaf axis node, including its rotation, whether it has a leaf, the type of organ it carries, and any additional physiological age.\\n\\n`Phytomer`: A class that represents a phytomer, which is a fundamental unit of plant structure. It defines the phyllotaxis (arrangement of leaves) for a plant.\\n\\n`Phytomer(float, Phyllotaxis[])`: A constructor for the `Phytomer` class that takes a random value for the phyllotaxis and an array of `Phyllotaxis` structs to define the leaf axis nodes.\\n\\n`ToString()`: A method that returns a string representation of the `Phytomer` object, including the phyllotaxis random value and the details of each leaf axis node.\&quot;,\&quot;/Packages/manifest.json\&quot;:\&quot;This file appears to be a Unity project\\u0027s package manifest, which defines the dependencies required for the project. It does not contain any classes or functions. Instead, it lists the various Unity modules and packages that the project depends on, such as the Collaboration Proxy, TextMeshPro, Timeline, UI Toolkit, and Visual Scripting. This file is used by Unity to manage the project\\u0027s dependencies and ensure that the necessary components are available for the project to function correctly.\&quot;,\&quot;/Assets/UnlimitedGreen/Axis.cs\&quot;:\&quot;This file contains the following classes and functions:\\n\\n`Axis`: A class that represents an axis in the plant structure, with information about its position, direction, and associated phytomers.\\n\\n`SetTopology`: A function that sets the position and direction of the axis based on the provided position and direction vectors.\\n\\n`Axis`: A constructor function that initializes an axis with the given axis order, entity bud, and phyllotaxis rotation.\\n\\n`BudPosition`: A property that returns the position of the last phytomer in the axis, or the axis position if there are no phytomers.\\n\\nThis file is part of the `UnlimitedGreen` namespace and appears to be responsible for managing the structure and topology of a plant\\u0027s axis, including the positioning of its phytomers and buds.\&quot;,\&quot;/Assets/UnlimitedGreen/Public/Organ.cs\&quot;:\&quot;`Organ`: An abstract class that represents an organ with a valid cycle count and a sink function.\\n\\n`Organ(int, Func\\u003cint, float\\u003e)`: The constructor for the `Organ` class, which takes in the valid cycle count and a sink function.\\n\\n`Fruit`: A class that inherits from `Organ` and represents a fruit.\\n\\n`Flower`: A class that inherits from `Organ` and represents a flower.\\n\\nThis file defines an abstract `Organ` class and two concrete classes, `Fruit` and `Flower`, that inherit from it. The `Organ` class has a valid cycle count and a sink function, which are used to represent the behavior of different types of organs. The file also includes some data validation checks in the `Organ` constructor that are only executed in the Unity Editor.\&quot;,\&quot;/README.md\&quot;:\&quot;This file appears to be a document header with the title \\\&quot;ReaserchOnGameTreeGeneration\\\&quot;. There are no classes or functions listed in the provided text. The file seems to be a document or section about research on game tree generation, but no further details are provided.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;D:/Project/TomatoModelMaking/ReaserchOnGameTreeGeneration&quot;:&quot;{\&quot;/Assets/GetLightIntensity/LightIntensity.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/GetLightIntensity/LightIntensity.cs\&quot;,\&quot;file_name\&quot;:\&quot;LightIntensity.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;GetLightIntensity\&quot;,\&quot;method_parameters\&quot;:\&quot;(Vector3 worldPosition)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;worldPosition\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;}],\&quot;return_type\&quot;:\&quot;float\&quot;,\&quot;scope\&quot;:[[8,4],[82,5]]},{\&quot;method_name\&quot;:\&quot;CalculateLightIntensity\&quot;,\&quot;method_parameters\&quot;:\&quot;(Light light, float attenuation)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;light\&quot;,\&quot;name\&quot;:\&quot;Light\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;attenuation\&quot;}],\&quot;return_type\&quot;:\&quot;float\&quot;,\&quot;scope\&quot;:[[84,4],[94,5]]},{\&quot;method_name\&quot;:\&quot;CalculateLightAttenuation\&quot;,\&quot;method_parameters\&quot;:\&quot;(Vector3 positon,Light light)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;positon\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;},{\&quot;type\&quot;:\&quot;light\&quot;,\&quot;name\&quot;:\&quot;Light\&quot;}],\&quot;return_type\&quot;:\&quot;float\&quot;,\&quot;scope\&quot;:[[96,4],[103,5]]}]},\&quot;/Assets/GetLightIntensity/LightIntensityTool.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/GetLightIntensity/LightIntensityTool.cs\&quot;,\&quot;file_name\&quot;:\&quot;LightIntensityTool.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;OnDrawGizmos\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[5,4],[15,5]]}]},\&quot;/Assets/TestFiles/tester.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/TestFiles/tester.cs\&quot;,\&quot;file_name\&quot;:\&quot;tester.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Start\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[10,4],[13,5]]},{\&quot;method_name\&quot;:\&quot;Awake\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[15,4],[88,5]]},{\&quot;method_name\&quot;:\&quot;OnDrawGizmos\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[90,4],[93,5]]},{\&quot;method_name\&quot;:\&quot;Update\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[95,4],[102,5]]}]},\&quot;/Assets/UnlimitedGreen/Automaton/Automaton.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/Automaton/Automaton.cs\&quot;,\&quot;file_name\&quot;:\&quot;Automaton.cs\&quot;,\&quot;methods\&quot;:[]},\&quot;/Assets/UnlimitedGreen/Automaton/EntityAutomaton.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/Automaton/EntityAutomaton.cs\&quot;,\&quot;file_name\&quot;:\&quot;EntityAutomaton.cs\&quot;,\&quot;methods\&quot;:[]},\&quot;/Assets/UnlimitedGreen/EntityObjects/Entity_Organ.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/EntityObjects/Entity_Organ.cs\&quot;,\&quot;file_name\&quot;:\&quot;Entity_Organ.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ToString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;string\&quot;,\&quot;scope\&quot;:[[10,8],[13,9]]}]},\&quot;/Assets/UnlimitedGreen/EntityObjects/EntityBud.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/EntityObjects/EntityBud.cs\&quot;,\&quot;file_name\&quot;:\&quot;EntityBud.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Expansion\&quot;,\&quot;method_parameters\&quot;:\&quot;(Vector3 worldPosition,int planetAge,out (Phytomer phytomer,int indexNow)? phytomer)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;worldPosition\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;planetAge\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;phytomer\&quot;}],\&quot;return_type\&quot;:\&quot;bool\&quot;,\&quot;scope\&quot;:[[33,8],[98,9]]}]},\&quot;/Assets/UnlimitedGreen/EntityObjects/EntityPhytomer.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/EntityObjects/EntityPhytomer.cs\&quot;,\&quot;file_name\&quot;:\&quot;EntityPhytomer.cs\&quot;,\&quot;methods\&quot;:[]},\&quot;/Assets/UnlimitedGreen/OrganCohort/FlowerCohort.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/OrganCohort/FlowerCohort.cs\&quot;,\&quot;file_name\&quot;:\&quot;FlowerCohort.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Add\&quot;,\&quot;method_parameters\&quot;:\&quot;([NotNull] EntityFlower entityFlower)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;entityFlower\&quot;,\&quot;name\&quot;:\&quot;EntityFlower\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[30,8],[35,9]]},{\&quot;method_name\&quot;:\&quot;PushIn\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[38,8],[44,9]]},{\&quot;method_name\&quot;:\&quot;CalculateSinkSum\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;}],\&quot;return_type\&quot;:\&quot;float\&quot;,\&quot;scope\&quot;:[[46,8],[58,9]]},{\&quot;method_name\&quot;:\&quot;Allocate\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge,float producedBiomass,float sinkSum)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;producedBiomass\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;sinkSum\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[61,8],[80,9]]},{\&quot;method_name\&quot;:\&quot;IncreaseAge\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[83,8],[96,9]]},{\&quot;method_name\&quot;:\&quot;ToString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;string\&quot;,\&quot;scope\&quot;:[[100,8],[150,9]]}]},\&quot;/Assets/UnlimitedGreen/OrganCohort/FruitCohort.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/OrganCohort/FruitCohort.cs\&quot;,\&quot;file_name\&quot;:\&quot;FruitCohort.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Add\&quot;,\&quot;method_parameters\&quot;:\&quot;( [NotNull] EntityFruit entityFruit)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;entityFruit\&quot;,\&quot;name\&quot;:\&quot;EntityFruit\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[30,8],[36,9]]},{\&quot;method_name\&quot;:\&quot;PushIn\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[39,8],[45,9]]},{\&quot;method_name\&quot;:\&quot;CalculateSinkSum\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;}],\&quot;return_type\&quot;:\&quot;float\&quot;,\&quot;scope\&quot;:[[48,8],[60,9]]},{\&quot;method_name\&quot;:\&quot;Allocate\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge, float producedBiomass, float sinkSum)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;producedBiomass\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;sinkSum\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[63,8],[83,9]]},{\&quot;method_name\&quot;:\&quot;IncreaseAge\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[86,8],[101,9]]},{\&quot;method_name\&quot;:\&quot;ToString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;string\&quot;,\&quot;scope\&quot;:[[104,8],[154,9]]}]},\&quot;/Assets/UnlimitedGreen/OrganCohort/LeafCohort.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/OrganCohort/LeafCohort.cs\&quot;,\&quot;file_name\&quot;:\&quot;LeafCohort.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Add\&quot;,\&quot;method_parameters\&quot;:\&quot;(int physiologicalAge, EntityLeaf entityLeaf)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;physiologicalAge\&quot;},{\&quot;type\&quot;:\&quot;entityLeaf\&quot;,\&quot;name\&quot;:\&quot;EntityLeaf\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[50,8],[54,9]]},{\&quot;method_name\&quot;:\&quot;PushIn\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[56,8],[66,9]]},{\&quot;method_name\&quot;:\&quot;CalculateSinkSum\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;}],\&quot;return_type\&quot;:\&quot;float\&quot;,\&quot;scope\&quot;:[[68,8],[89,9]]},{\&quot;method_name\&quot;:\&quot;Allocate\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge, float producedBiomass, float sinkSum)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;producedBiomass\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;sinkSum\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[91,8],[116,9]]},{\&quot;method_name\&quot;:\&quot;Production\&quot;,\&quot;method_parameters\&quot;:\&quot;(float environmentParameter)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;environmentParameter\&quot;}],\&quot;return_type\&quot;:\&quot;float\&quot;,\&quot;scope\&quot;:[[118,8],[147,9]]},{\&quot;method_name\&quot;:\&quot;IncreaseAge\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[149,8],[172,9]]},{\&quot;method_name\&quot;:\&quot;ToString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;string\&quot;,\&quot;scope\&quot;:[[174,8],[256,9]]}]},\&quot;/Assets/UnlimitedGreen/OrganCohort/NewPhytomerCohort.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/OrganCohort/NewPhytomerCohort.cs\&quot;,\&quot;file_name\&quot;:\&quot;NewPhytomerCohort.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Add\&quot;,\&quot;method_parameters\&quot;:\&quot;([NotNull] EntityPhytomer entityPhytomer, \\r\\n            [NotNull] Phytomer phytomer,\\r\\n            int physiologicalAge, \\r\\n            [NotNull] Axis axis,\\r\\n            int indexOnAxis)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;entityPhytomer\&quot;,\&quot;name\&quot;:\&quot;EntityPhytomer\&quot;},{\&quot;type\&quot;:\&quot;phytomer\&quot;,\&quot;name\&quot;:\&quot;Phytomer\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;physiologicalAge\&quot;},{\&quot;type\&quot;:\&quot;axis\&quot;,\&quot;name\&quot;:\&quot;Axis\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;indexOnAxis\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[45,8],[62,9]]},{\&quot;method_name\&quot;:\&quot;CalculateSinkSum\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;}],\&quot;return_type\&quot;:\&quot;float\&quot;,\&quot;scope\&quot;:[[64,8],[77,9]]},{\&quot;method_name\&quot;:\&quot;IncreaseAge\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;HashSet\\u003cEntityPhytomer\\u003e[]\&quot;,\&quot;scope\&quot;:[[83,8],[100,9]]},{\&quot;method_name\&quot;:\&quot;Allocate\&quot;,\&quot;method_parameters\&quot;:\&quot;(\\r\\n            float producedBiomass, \\r\\n            float sinkSum)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;producedBiomass\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;sinkSum\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[110,8],[176,9]]},{\&quot;method_name\&quot;:\&quot;ToString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;string\&quot;,\&quot;scope\&quot;:[[178,8],[195,9]]}]},\&quot;/Assets/UnlimitedGreen/OrganCohort/PhytomerCohort.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/OrganCohort/PhytomerCohort.cs\&quot;,\&quot;file_name\&quot;:\&quot;PhytomerCohort.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;CalculateSinkSum\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;}],\&quot;return_type\&quot;:\&quot;float\&quot;,\&quot;scope\&quot;:[[33,8],[48,9]]},{\&quot;method_name\&quot;:\&quot;Allocate\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge,float producedBiomass, float sinkSum)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;producedBiomass\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;sinkSum\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[51,8],[79,9]]},{\&quot;method_name\&quot;:\&quot;IncreaseAge\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[81,8],[96,9]]},{\&quot;method_name\&quot;:\&quot;Add\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge, HashSet\\u003cEntityPhytomer\\u003e[] hashSets)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;},{\&quot;type\&quot;:\&quot;HashSet\\u003cEntityPhytomer\\u003e[]\&quot;,\&quot;name\&quot;:\&quot;hashSets\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[98,8],[107,9]]}]},\&quot;/Assets/UnlimitedGreen/Public/Bud.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/Public/Bud.cs\&quot;,\&quot;file_name\&quot;:\&quot;Bud.cs\&quot;,\&quot;methods\&quot;:[]},\&quot;/Assets/UnlimitedGreen/Public/Organ.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/Public/Organ.cs\&quot;,\&quot;file_name\&quot;:\&quot;Organ.cs\&quot;,\&quot;methods\&quot;:[]},\&quot;/Assets/UnlimitedGreen/Public/Phytomer.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/Public/Phytomer.cs\&quot;,\&quot;file_name\&quot;:\&quot;Phytomer.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;ToString\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;string\&quot;,\&quot;scope\&quot;:[[66,8],[75,9]]}]},\&quot;/Assets/UnlimitedGreen/Public/Plant.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/Public/Plant.cs\&quot;,\&quot;file_name\&quot;:\&quot;Plant.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Pruning\&quot;,\&quot;method_parameters\&quot;:\&quot;(Axis targetAxis,int targetIndex, float positionRatio)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;targetAxis\&quot;,\&quot;name\&quot;:\&quot;Axis\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;targetIndex\&quot;},{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;positionRatio\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[188,8],[270,9]]},{\&quot;method_name\&quot;:\&quot;Growth\&quot;,\&quot;method_parameters\&quot;:\&quot;(float environmentParameter)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;environmentParameter\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[272,8],[304,9]]},{\&quot;method_name\&quot;:\&quot;Organogenesis\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[307,8],[419,9]]}]},\&quot;/Assets/UnlimitedGreen/Public/PlantPruner.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/Public/PlantPruner.cs\&quot;,\&quot;file_name\&quot;:\&quot;PlantPruner.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Generate\&quot;,\&quot;method_parameters\&quot;:\&quot;(Plant plant)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;plant\&quot;,\&quot;name\&quot;:\&quot;Plant\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,8],[41,9]]}]},\&quot;/Assets/UnlimitedGreen/Public/PlantRenderer.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/Public/PlantRenderer.cs\&quot;,\&quot;file_name\&quot;:\&quot;PlantRenderer.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;Awake\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[42,8],[46,9]]},{\&quot;method_name\&quot;:\&quot;Render\&quot;,\&quot;method_parameters\&quot;:\&quot;(Plant plant)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;plant\&quot;,\&quot;name\&quot;:\&quot;Plant\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[49,8],[377,9]]},{\&quot;method_name\&quot;:\&quot;GizmosDraw\&quot;,\&quot;method_parameters\&quot;:\&quot;(Plant plant)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;plant\&quot;,\&quot;name\&quot;:\&quot;Plant\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[380,8],[469,9]]},{\&quot;method_name\&quot;:\&quot;Draw\&quot;,\&quot;method_parameters\&quot;:\&quot;(Vector3 position)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;position\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[479,12],[484,13]]}]},\&quot;/Assets/UnlimitedGreen/Axis.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/Axis.cs\&quot;,\&quot;file_name\&quot;:\&quot;Axis.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;SetTopology\&quot;,\&quot;method_parameters\&quot;:\&quot;(Vector3 position,Vector3 direction)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;position\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;},{\&quot;type\&quot;:\&quot;direction\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[17,8],[32,9]]}]},\&quot;/Assets/UnlimitedGreen/GenericFunctions.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/GenericFunctions.cs\&quot;,\&quot;file_name\&quot;:\&quot;GenericFunctions.cs\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;CalculateAge\&quot;,\&quot;method_parameters\&quot;:\&quot;(int plantAge, int birthCycle)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;plantAge\&quot;},{\&quot;type\&quot;:\&quot;int\&quot;,\&quot;name\&quot;:\&quot;birthCycle\&quot;}],\&quot;return_type\&quot;:\&quot;int\&quot;,\&quot;scope\&quot;:[[12,8],[15,9]]},{\&quot;method_name\&quot;:\&quot;NewSubDirection\&quot;,\&quot;method_parameters\&quot;:\&quot;(Vector3 preDirection, Vector3 newDirection, \\r\\n            Vector3 preSubDirection)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;preDirection\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;},{\&quot;type\&quot;:\&quot;newDirection\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;},{\&quot;type\&quot;:\&quot;preSubDirection\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;}],\&quot;return_type\&quot;:\&quot;Vector3\&quot;,\&quot;scope\&quot;:[[24,8],[31,9]]},{\&quot;method_name\&quot;:\&quot;PhyllotaxisToVerticalDirection\&quot;,\&quot;method_parameters\&quot;:\&quot;(float phyllotaxisDirection, Vector3 direction, Vector3 subDirection)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;float\&quot;,\&quot;name\&quot;:\&quot;phyllotaxisDirection\&quot;},{\&quot;type\&quot;:\&quot;direction\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;},{\&quot;type\&quot;:\&quot;subDirection\&quot;,\&quot;name\&quot;:\&quot;Vector3\&quot;}],\&quot;return_type\&quot;:\&quot;Vector3\&quot;,\&quot;scope\&quot;:[[40,8],[45,9]]}]},\&quot;/Assets/UnlimitedGreen/LeafData.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/LeafData.cs\&quot;,\&quot;file_name\&quot;:\&quot;LeafData.cs\&quot;,\&quot;methods\&quot;:[]},\&quot;/Assets/UnlimitedGreen/PhytomerData.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/PhytomerData.cs\&quot;,\&quot;file_name\&quot;:\&quot;PhytomerData.cs\&quot;,\&quot;methods\&quot;:[]},\&quot;/Assets/UnlimitedGreen/ReadMe.md\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/ReadMe.md\&quot;,\&quot;file_name\&quot;:\&quot;ReadMe.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/Assets/UnlimitedGreen/UnlimitedGreen.cs\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/UnlimitedGreen/UnlimitedGreen.cs\&quot;,\&quot;file_name\&quot;:\&quot;UnlimitedGreen.cs\&quot;,\&quot;methods\&quot;:[]},\&quot;/Assets/Automaton部分.md\&quot;:{\&quot;file_path\&quot;:\&quot;/Assets/Automaton部分.md\&quot;,\&quot;file_name\&quot;:\&quot;Automaton部分.md\&quot;,\&quot;methods\&quot;:[]},\&quot;/Packages/manifest.json\&quot;:{\&quot;file_path\&quot;:\&quot;/Packages/manifest.json\&quot;,\&quot;file_name\&quot;:\&quot;manifest.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/Packages/packages-lock.json\&quot;:{\&quot;file_path\&quot;:\&quot;/Packages/packages-lock.json\&quot;,\&quot;file_name\&quot;:\&quot;packages-lock.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json\&quot;:{\&quot;file_path\&quot;:\&quot;/ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json\&quot;,\&quot;file_name\&quot;:\&quot;Settings.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/ProjectSettings/SceneTemplateSettings.json\&quot;:{\&quot;file_path\&quot;:\&quot;/ProjectSettings/SceneTemplateSettings.json\&quot;,\&quot;file_name\&quot;:\&quot;SceneTemplateSettings.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>